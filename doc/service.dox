/*!
@class QtService::Service

This class is the primary interface for a service. In your own service, you will implement this class
and use it as replacement for QCoreApplication:

@code{.cpp}
int main(int argc, char *argv[])
{
	MyService service{argc, argv}; // extends QtService::Service
	return service.exec();
}
@endcode

**Rules of usage:**<br/>
You should always follow the following rules when using/creating a service:

- Do not create a QCoreApplication yourself - this is done internally
- Use the same constructor signature to pass the main arguments. It is very important that the argc
argument is passed as reference! Passing as value will crash your application
- Do nothing else in the main besides setting the serices properties that need to be set early! Any
setup etc. must all be done in the Service::onStart method!!! (The properties that need to be set
early all have a hint in their documentation)
- Never call QCoreApplication::quit (or QCoreApplication::exit)! Use Service::quit instead
- Do not rely on QCoreApplication::aboutToQuit, as this may not be emitted at all, or on some
arbitrary point. Put all cleanup code in the Service::onStop method
- Be careful with Service::preStart - only use it when you have no other choice
*/

/*!
@property QtService::Service::backend

@default{`standard`}

This is set by the backend which is internally used to run the service. The backend can be selected
by the `--backend <backend>` command.

@accessors{
	@readAc{backend()}
	@constantAc
}
*/

/*!
@property QtService::Service::runtimeDir

@default{<i>Platform dependend</i>}

The runtime directory to be used to place sockets, lockfiles and other temporary stuff. This directoy
may be managed by the underlying service framework and is the same as reported by the service control

@accessors{
	@readAc{runtimeDir()}
	@constantAc
}

@sa ServiceControl::runtimeDir
*/

/*!
@property QtService::Service::terminalActive

@default{`false`}

Set this property to true to enable the internal terminal server. When activated, terminals that are
created via `--terminal` can connect to the service. Otherwise they won't be able to.

@note Terminals won't even try to connect if this property is not set. Thus you should always set
this property before calling Service::exec. If you want to device whether you want terminals
dynamically, simply set this property to false again in the Service::preStart or Service::onStart
methods.

@accessors{
	@readAc{isTerminalActive()}
	@writeAc{setTerminalActive()}
	@notifyAc{terminalActiveChanged()}
}

@sa Terminal, Service::terminalConnected, Service::terminalMode, Service::globalTerminal,
Service::startWithTerminal
*/

/*!
@property QtService::Service::terminalMode

@default{`Service::ReadWriteActive`}

The terminal mode that terminal clients should use to connect to the service with. The mode
determines how I/O is managed between the service and the terminal. The general recommendation is
to design a terminal for Service::ReadWriteActive when it is intended to be used by a human, and use
one of the other 3 for machine to machine communication, choosing whichever directions of
communication are needed.

Please note that this property is evaluated from the terminals themselves, which means you should
set it before calling Service::exec. Changing it on the service instance will have no effect.

@note For the active mode, the user won't be able to input anything unless the Terminal::request*
(or Terminal::await*) methods are called.

@accessors{
	@readAc{terminalMode()}
	@writeAc{setTerminalMode()}
	@notifyAc{terminalModeChanged()}
}

@sa Terminal, Service::terminalActive, Terminal::terminalMode, Terminal::requestChar,
Terminal::requestChars, Terminal::requestLine, Terminal::awaitChar, Terminal::awaitChars,
Terminal::awaitLine
*/

/*!
@property QtService::Service::globalTerminal

@default{`false`}

In local mode (the default) only terminals started from the same user account as the one the service
is running as can access the service. This is fine for user-mode services, but system services
typically run as system user.

When in global mode, **anyone** can connect to the service, effectively bridging that barrier.

@note Changing this property after activating terminals (setting Service::terminalActive to true)
has no effect. Either set this property beforehand or disable and reenable the former after changing
this one.

@warning In global mode, **ANY** user has access to the service, and can send commands to it. You
should be very careful when exposing a service to the whole system, as it can lead to potential
security risks, especially when the service is running as system service.

@accessors{
	@readAc{globalTerminal()}
	@writeAc{setGlobalTerminal()}
	@notifyAc{globalTerminalChanged()}
}

@sa Terminal, Service::terminalActive
*/

/*!
@property QtService::Service::startWithTerminal

@default{`false`}

If enabled, the terminal client will use the ServiceControl of the corresponding service backend
to determine whether the service is already running, and if not start it.

This of course will only work if the service supports starting. If status information is supported,
the terminals will use that to check the state. Otherwise the simply to start in a fire and forget
manner and then try to connect.

@note This property is evaluated from the terminals themselves, which means you should set it before
calling Service::exec. Changing it on the service instance will have no effect.

@accessors{
	@readAc{startWithTerminal()}
	@writeAc{setStartWithTerminal()}
	@notifyAc{startWithTerminalChanged()}
}

@sa Terminal, Service::terminalActive, ServiceControl, ServiceControl::SupportsStart,
ServiceControl::SupportsStatus
*/

/*!
@fn QtService::Service::Service

@param argc The `argc` argument of the main
@param argv The `argv` argument of the main

Create a service from the arguments passed to the application

@attention It is *very important* that the first parameter is a reference! When implementing this
interface, make shure your constructor has the the two arg parameters and the the argc argument is
a reference as well! Passing by value will crash your application!
*/

/*!
@fn QtService::Service::exec

@returns The exit code of the application that should be returned from the main.

This method is blocking and will internally call `QCoreApplication::exec` at some point. In other
words this method starts the service as well as the main event loop.
*/

/*!
@fn QtService::Service::instance

@returns The current service instance

This is only set when actually running as service and the service has been created. Otherwise,
nullptr is returned

@sa qService
*/

/*!
@fn QtService::Service::getSockets

@param socketName The name of the socket to be retrieved
@returns The socket descriptors associated with that name

On services that supports socket activation, you can retrieve the activated sockets with this method.
Typically, only one socket is found per name, but sometimes you may want to listen on different
interfaces for the same service, thus it is possible multiple sockets share an identity. In case you
only have a single unnamed socket, use Service::getSocket instead

The returned sockets can be used with classes like QTcpServer, QLocalServer or QWebSocketServer. All
of these classes have a method to set an already activated socket descriptor they can work with.

@sa Service::getSocket, QTcpServer::setSocketDescriptor, QLocalServer::listen,
QWebSocketServer::setSocketDescriptor, http://0pointer.de/blog/projects/socket-activation.html
*/

/*!
@fn QtService::Service::getSocket

@returns The default socket descriptor, if one exists, otherwise -1

On services that supports socket activation, you can retrieve an activated sockets with this method.
If the backend supports getting the default, unnamed socket, then this method is an easy way to get
it. If you want multiple sockets or can access them by name only, use Service::getSockets instead.

The returned socket can be used with classes like QTcpServer, QLocalServer or QWebSocketServer. All
of these classes have a method to set an already activated socket descriptor they can work with.

@sa Service::getSockets, QTcpServer::setSocketDescriptor, QLocalServer::listen(qintptr),
QWebSocketServer::setSocketDescriptor, http://0pointer.de/blog/projects/socket-activation.html
*/

/*!
@fn QtService::Service::quit

Stops the service by using the appropriate method to do so for each backend. Use this method instead
of QCoreApplication::quit (and QCoreApplication::exit), as the latter will not do a proper stop!

This method will initialize the stop which will eventually lead to Service::onStop beeing called and
the service to quit

@sa Service::onStop
*/

/*!
@fn QtService::Service::reload

This method will notify the service manager that the service is about to reload and the call
Service::onReload. This allows you to perform some kind of reload operation without the service
manager triggering it, but still report that it is happening to the manager.

@sa Service::onReload
*/

/*!
@fn QtService::Service::terminalConnected

@param terminal The connected terminal

This methods is called internally if terminal mode is enabled and a terminal has connected. The whole
initialization is done internally, which means at this point the terminal is connected and ready to
be used. The commands are also already available at this point.

The ownership of the terminal is transferred to this method, whichs means your implementation must
now take care of the terminal. The terminals parent object will already be this service instance.

@note The default implementation will simply disconnect the terminal again and let it delete itself
once disconnected.

@sa Terminal, Service::terminalActive
*/

/*!
@fn QtService::Service::preStart

@returns `true` if the service can continue to start, `false` if it should abort starting and exit

This method can be used to perform startup operations that must be done before the eventloop starts.
At the point of the method beeing called the QCoreApplication already exists and logging has been set
up (however, depending on the platform might not work correctly yet). The services state however is
uncertain and not ready yet.

@warning Generally, you should **not** implement this method as it is called in an early state where
the serivce is not completely initialized! Do everything you can in Service::onStart. Only when you
need to do something that cannot be done after the eventloop started, do it here. (For example if
you need to capture an early event with a custom event listener that would be missed otherwise or to
set a customlogging message pattern)

@sa Service::onStart
*/

/*!
@fn QtService::Service::onStart

@returns The command state after the method returned

At the point this method is called first thing after the eventloop has started and the service setup
part of the backends has been completed. The service can now start doing it's actual work. Use this
method to create the stuff your service needs to run, like starting servers etc.

This method can behave in 2 ways. If you return Service::Synchronous, that the service engine assumes
that startup has successfully been completed and the service leaves the "starting" state and enters
the "running" state. However, you might need to perform an asynchronous operation during startup
(like connecting to some dependend service). In that case Service::Asynchronous can be returned to
indicate that starting has not been completed yet. The service will remain in the starting state
until you emit Servie::started. Please note that beeing in the starting state is also known by the
service manager. Depending on the service backend this state may time out leading to the manager
killing off your process if it takes to long.

@attention Never emit the started signal and return Service::Synchronous - this will most likely
crash your application. You can always emit the started signal from within this method and simply
return Service::Asynchronous - it will give you the same result as only returning
Service::Synchronous, but allows you to emit the signal yourself. This is useful if the startup
operation may or may not be asynchronous.

@sa Service::CommandMode, Service::started, Service::onStop
*/

/*!
@fn QtService::Service::onStop

@param exitCode [out] You can set this to the code your service should exit with
@returns The command state after the method returned

This method is called by the backends if the service received a request to stop. Use this method to
clean up stuff, close connections etc.

This method can behave in 2 ways. If you return Service::Synchronous, that the service engine assumes
that stop has successfully been completed and the service leaves the "stopping" state and the
proccess will quit after the backend completed it's internal cleanups. However, you might need to
perform an asynchronous operation during the stop (like writing remaining data). In that case
Service::Asynchronous can be returned to indicate that stopping has not been completed yet. The
service will remain in the stopping state until you emit Servie::stopped. Please note that beeing in
the stopping state is also known by the service manager. Depending on the service backend this state
may time out leading to the manager killing off your process if it takes to long.

In case you run the method synchronous, you can report an exit code to the parameter. If you don't
set it, it will be set to `EXIT_SUCCESS` - aka `0` on most platforms. For asynchronous stopping, use
the signal parameter instead.

@attention Never emit the stopped signal and return Service::Synchronous - this will most likely
crash your application. You can always emit the stopped signal from within this method and simply
return Service::Asynchronous - it will give you the same result as only returning
Service::Synchronous, but allows you to emit the signal yourself. This is useful if the stop
operation may or may not be asynchronous.

@sa Service::CommandMode, Service::stopped, Service::onStart
*/

/*!
@fn QtService::Service::onReload

@returns The command state after the method returned

This method can be called any time while the service is in it's running state. It is typically used
by the service manager to tell the service that some configurations have changed and that it should
reload those - it's basically a faster alternative to restarting the whole service.

This method can behave in 2 ways. If you return Service::Synchronous, that the service engine assumes
that reload has successfully been completed and the service leaves the "reloading" state and goes
back to the the "running" state. However, you might need to perform an asynchronous operation during
the reload (like reconnecting to some dependend service). In that case Service::Asynchronous can be
returned to indicate that reloading has not been completed yet. The service will remain in the
reloading state until you emit Servie::reloaded. Please note that beeing in the reloading state is
also known by the service manager. Depending on the service backend this state may time out leading
to the manager killing off your process if it takes to long.

@attention Never emit the reloaded signal and return Service::Synchronous - this will most likely
crash your application. You can always emit the reloaded signal from within this method and simply
return Service::Asynchronous - it will give you the same result as only returning
Service::Synchronous, but allows you to emit the signal yourself. This is useful if the reload
operation may or may not be asynchronous.

@sa Service::CommandMode, Service::reloaded
*/

/*!
@fn QtService::Service::onPause

@returns The command state after the method returned

This method is called by the service manager if the serivce should pause whatever it is currently
doing. Use the method to pause running operations like stopping accepting on sockets or pausing
asynchronours calculations.

Also, depending on the serice backend your process may halt excution after entering the paused state,
which means your service will actually stop running until it is resumed - however this behaviour is
inconsistent on different platforms and you should never rely on it, only be prepared.

This method can behave in 2 ways. If you return Service::Synchronous, that the service engine assumes
that pause has successfully been completed and the service leaves the "pausing" state and enters the
"paused" state. However, you might need to perform an asynchronous operation during the pause. In
that case Service::Asynchronous can be returned to indicate that pausing has not been completed yet.
The service will remain in the pausing state until you emit Servie::paused. Please note that beeing
in the pausing state is also known by the service manager. Depending on the service backend this
state may time out leading to the manager killing off your process if it takes to long.

@attention Never emit the paused signal and return Service::Synchronous - this will most likely
crash your application. You can always emit the paused signal from within this method and simply
return Service::Asynchronous - it will give you the same result as only returning
Service::Synchronous, but allows you to emit the signal yourself. This is useful if the pause
operation may or may not be asynchronous.

@sa Service::CommandMode, Service::paused, Service::onResume
*/

/*!
@fn QtService::Service::onResume

@returns The command state after the method returned

This method is called by the service manager if the service should resume it's work after having
been paused. This method is called by the backend as soon as the process continues it's execution.
You can use the method to continue whatever you paused in Service::onPause.

This method can behave in 2 ways. If you return Service::Synchronous, that the service engine assumes
that resume has successfully been completed and the service leaves the "resuming" state and enters
the "running" state again. However, you might need to perform an asynchronous operation during the
resume. In that case Service::Asynchronous can be returned to indicate that resuming has not been
completed yet. The service will remain in the resuming state until you emit Servie::resumed. Please
note that beeing in the resuming state is also known by the service manager. Depending on the service
backend this state may time out leading to the manager killing off your process if it takes to long.

@attention Never emit the resumed signal and return Service::Synchronous - this will most likely
crash your application. You can always emit the resumed signal from within this method and simply
return Service::Asynchronous - it will give you the same result as only returning
Service::Synchronous, but allows you to emit the signal yourself. This is useful if the resume
operation may or may not be asynchronous.

@sa Service::CommandMode, Service::resumed, Service::onPause
*/

/*!
@fn QtService::Service::onCallback

@returns The callbacks return value
@param kind The kind of command that is beeing handeled
@param args The arguments of that command

This method is called by the backend for any kind of custom command. The parameters and return value
of the command depend on the kind of command it is. Check the @ref qtservice_backends documentation
for a list of callbacks for each service backend.

Typically, you don't need to implement this method yourself. Instead, simply register a member of
your service class as callback for a specific kind. That method will then be called by the default
implementation of this method. Example:

@code{.cpp}
// in your service contructor:
addCallback("doStuff", &MyService::doStuff);

// in the cpp file:
// IMPORTANT: this signature must match the one declared by the service backend!
int MyService::doStuff(int p1, double p2) {
	qDebug() << "Custom callback doStuff called with" << p1 << p2;
	return p1;
}
@endcode

@sa @ref qtservice_backends, Service::addCallback, ServiceControl::callCommand
*/

/*!
@fn QtService::Service::verifyCommand

@param arguments The terminal client arguments
@returns `true` if the arguments are valid, `false` if not

This method is called on a Terminal client (i.e. *not* the service process, but the terminal client
process) before it tries to connect to the service. You can implement to provide an early validation
of command line arguments which leads to a better experience when using terminals.

@sa Terminal, Service::terminalConnected, Terminal::command
*/


