/*!
@class QtService::ServiceControl

This class can be used to get information about a specific service and control it by sending
service commands to it through the service manager. This can be used for all services of the
corresponding manager, not only services created by this library.

The concrete instances are implemented by each service backend plugin, thus the creation via
a helper method.

@attention Not all service backends support all kinds of service operations. This class is a
common interface, but to find out which methods actually work, you need to query the
ServiceControl::supportFlags property for a concrete backend. Those flags however are
typically (but not neccessarily) static per plugin. You can check the what each backends
implementation supports on the @ref qtservice_backends page.

@sa @ref qtservice_backends, ServiceControl::supportFlags
*/

/*!
@property QtService::ServiceControl::backend

@default{<i>Set on creation</i>}

This is simply the backend this control was created by. Typically this is exactly the same
as what was passed to the ServiceControl::create function - allthough for backends that have
multiple names this may not be the case.

@accessors{
	@readAc{backend()}
	@constantAc
}

@sa ServiceControl::create, ServiceControl::serviceId
*/

/*!
@property QtService::ServiceControl::serviceId

@default{<i>Set on creation</i>}

This is simply the service id this control was created by. Typically this is exactly the same
as what was passed to the ServiceControl::create function, but backends may normalize the name
if applicable.

@accessors{
	@readAc{serviceId()}
	@constantAc
}

@sa ServiceControl::create, ServiceControl::backend
*/

/*!
@property QtService::ServiceControl::supportFlags

@default{<i>Depends on backend</i>}

The support flags indicate what this concrete implementation is capable of doing. The flags
returned depend on the backend and should be checked before performing an operation, as
performing an unsupported operation will cause an error.

@accessors{
	@readAc{supportFlags()}
	@constantAc
}

@sa ServiceControl::backend, ServiceControl::SupportFlag, ServiceControl::create
*/

/*!
@property QtService::ServiceControl::blocking

@default{`supportFlags().testFlag(SupportsBlocking)`}

Whether a backend supports either of those modes depends on the support flags. The following
combinations are possible:

 SupportsBlocking	| SupportsNonBlocking	| Behaviour
--------------------|-----------------------|-----------
 yes				| yes					| The behaviour of all commands is determined by this property
 yes				| no					| This property is ignored - services will always behave blocking
 no					| yes					| This property is ignored - services will always behave non blocking
 no					| no					| This property is ignored - the services behaviour is undefined - some methods may be blocking, other unblocking

If commands are blocking, it means that the control won't return from a command until it's
execution has been completed. So if you for example start a service in blocking mode, the
method will return only after the service reached the running state or error. In this case
the method will return the actual result of the operation.

In nonblocking mode the command is only dispatched to the service manager and true is returned
if the manager accepted the command. You will have to use ServiceControl::status to check the
services state, if available.

@accessors{
	@readAc{isBlocking()}
	@writeAc{setBlocking()}
	@notifyAc{blockingChanged()}
}

@sa ServiceControl::SupportsBlocking, ServiceControl::SupportsNonBlocking
*/

/*!
@property QtService::ServiceControl::error

@default{<i>null string</i>}

This error can be set form the implementations in case an operation or query failed. It is
a localized string describing what went wrong. The error message is not cleared automatically.
Use clearError() to clear it.

Use setError() to set an error from the implementation

@accessors{
	@readAc{error()}
	@resetAc{clearError()}
	@notifyAc{errorChanged()}
}

@sa ServiceControl::setError
*/

/*!
@fn QtService::ServiceControl::likelyBackend

@returns The most likely backend for the current platform

 Platform	| Backend
------------|---------
 Android	| android
 Linux		| systemd
 Windows	| windows
 MacOs		| launchd
 Others		| standard

@sa ServiceControl::listBackends, ServiceControl::create
*/

/*!
@fn QtService::ServiceControl::create

@param backend The backend to create a control from
@param serviceId The id of the service to control
@param parent The parent object of the new control
@returns The newly created backend, or nullptr
@throws QException In case loading fails

Uses the plugin defined by backend to create a service control for the given service. If no
plugin can be found that provides this backend, nullptr is returned. If a plugin was found,
but actually loading it and creating the control failed, an exception is thrown.

The returned instance is owned by the caller. To check if the control operates on a valid
service, use ServiceControl::serviceExists

@sa ServiceControl::createFromName, ServiceControl::serviceExists, ServiceControl::supportFlags,
ServiceControl::likelyBackend
*/

/*!
@fn QtService::ServiceControl::createFromName(const QString &, const QString &, QObject *)

@param backend The backend to create a control from
@param serviceName The generic name of the service to control
@param parent The parent object of the new control
@returns The newly created backend, or nullptr
@throws QException In case loading fails

Uses the plugin defined by backend to create a service control for the given service. If no
plugin can be found that provides this backend, nullptr is returned. If a plugin was found,
but actually loading it and creating the control failed, an exception is thrown.

The service identity is derived from the name and domain. The actual method depends on the backend:
 Backend	| Deriviation method
------------|--------------------
 standard	| Searches for an executable named `<serviceName>` next to the app and in the path
 systemd	| First tries `<domain>.<serviceName>.service`, if not found `<serviceName>.service`
 windows	| Simply `<serviceName>`
 launchd	| Uses `<domain>.<serviceName>`
 android	| Generates the java class name `<domain>.<serviceName>`

The returned instance is owned by the caller. To check if the control operates on a valid
service, use ServiceControl::serviceExists

@sa ServiceControl::create, mServiceControl::serviceExists, ServiceControl::supportFlags,
ServiceControl::likelyBackend
*/

/*!
@fn QtService::ServiceControl::createFromName(const QString &, const QString &, const QString &, QObject *)
@param domain The domain of the service, instead of the domain of this application
@copydetails QtService::ServiceControl::createFromName(const QString &, const QString &, QObject *)
*/

/*!
@fn QtService::ServiceControl::callGenericCommand

@param kind The kind of command to be called
@param args The arguments of the command
@returns The return of the command

Custom commands can only be used if the control supports the
ServiceControl::SupportsCustomCommands flag is set. If the operation is not supported,
an invalid variant will be returned and ServiceControl::error is set.

This method can be used to execute a custom command, i.e. one that is not a standard command.
Each backend can define it's own custom commands. The kind is what should be done and the
arguments are parameters for the execution of that command. The command will follow the
standard blocking rules and return a value of whatever kind.

The commands that are possible are defined by each backend. For the standard backends you can
find the commans on the @ref qtservice_backends Page.
*/

/*!
@fn QtService::ServiceControl::serviceExists

@returns true if the service exists, false if not

This method uses the service backend to perform a check whether the service defined by
ServiceControl::serviceId actually exists. On errors, ServiceControl::error will be set.

For backends that cannot determine this they should simply always return true. If the backend
fails to find out, ServiceControl::setError can be used to set an error string.

@sa ServiceControl::serviceId, ServiceControl::error
*/

/*!
@fn QtService::ServiceControl::status

@returns The current status of the service

The status can only be returned if the control supports the ServiceControl::SupportsStatus
flag is set. The kinds of status returned differ on the capabilities of each service manager.
If the operation is not supported, ServiceControl::ServiceStatusUnknown will be returned and
ServiceControl::error is set.

A backend should query the manager from this method in a synchronous manner to get and return
the service status. If the backend fails to find out, ServiceControl::setError can be used to
set an error string and ServiceControl::ServiceStatusUnknown should be returned to indicate
the error.

@sa ServiceControl::SupportsStatus, ServiceControl::supportFlags, ServiceControl::error
*/

/*!
@fn QtService::ServiceControl::isAutostartEnabled

@returns true if the service will start automatically with the system, false if not

The status can only be returned if the control supports the
ServiceControl::SupportsGetAutostart flag is set.

@note When using socket activation, the autostart is reported as false, as the service itself
will not start until someone tries to connect to the socket. So activated services should not
be autostart enabled. Instead try to connect to them, and if it fails start them explicitly.

A backend should query the manager from this method in a synchronous manner to get and return
the autostart status. If the backend fails to find out, ServiceControl::setError can be used
to set an error string and false should be returned.

@sa ServiceControl::SupportsGetAutostart, ServiceControl::supportFlags, ServiceControl::error,
ServiceControl::enableAutostart, ServiceControl::disableAutostart
*/

/*!
@fn QtService::ServiceControl::runtimeDir

@returns The runtime directory to be used to place sockets, lockfiles and other temporary
stuff

This directoy is determined by the service engine to find the runtime directory of a service
on each platform. This should always be the same value as the Service::runtimeDir for the
service controlled by this instance.

@sa Service::runtimeDir
*/

/*!
@fn QtService::ServiceControl::start

@returns true if successfully started, false if not

The command can only be used if the control supports the ServiceControl::SupportsStart flag
is set. If the operation is not supported, false will be returned and ServiceControl::error
is set.

The command will follow the standard blocking rules and return true either after successfully
starting or dispatching the start command.

@sa ServiceControl::SupportsStart, ServiceControl::supportFlags, ServiceControl::error,
ServiceControl::blocking, ServiceControl::stop
*/

/*!
@fn QtService::ServiceControl::stop

@returns true if successfully stopped, false if not

The command can only be used if the control supports the ServiceControl::SupportsStop flag
is set. If the operation is not supported, false will be returned and ServiceControl::error
is set.

The command will follow the standard blocking rules and return true either after successfully
stopping or dispatching the stop command.

@sa ServiceControl::SupportsStop, ServiceControl::supportFlags, ServiceControl::error,
ServiceControl::blocking, ServiceControl::start
*/

/*!
@fn QtService::ServiceControl::pause

@returns true if successfully paused, false if not

The command can only be used if the control supports the ServiceControl::SupportsPause flag
is set. If the operation is not supported, false will be returned and ServiceControl::error
is set.

The command will follow the standard blocking rules and return true either after successfully
pausing or dispatching the pause command.

@sa ServiceControl::SupportsPause, ServiceControl::supportFlags, ServiceControl::error,
ServiceControl::blocking, ServiceControl::resume
*/

/*!
@fn QtService::ServiceControl::resume

@returns true if successfully resumed, false if not

The command can only be used if the control supports the ServiceControl::SupportsResume flag
is set. If the operation is not supported, false will be returned and ServiceControl::error
is set.

The command will follow the standard blocking rules and return true either after successfully
resuming or dispatching the resume command.

@sa ServiceControl::SupportsResume, ServiceControl::supportFlags, ServiceControl::error,
ServiceControl::blocking, ServiceControl::pause
*/

/*!
@fn QtService::ServiceControl::reload

@returns true if successfully reloaded, false if not

The command can only be used if the control supports the ServiceControl::SupportsReload flag
is set. If the operation is not supported, false will be returned and ServiceControl::error
is set.

The command will follow the standard blocking rules and return true either after successfully
reloading or dispatching the reload command.

@sa ServiceControl::SupportsReload, ServiceControl::supportFlags, ServiceControl::error,
ServiceControl::blocking
*/

/*!
@fn QtService::ServiceControl::enableAutostart

@returns true if autostart was enabled, false if not

The command can only be used if the control supports the ServiceControl::SupportsSetAutostart
flag is set. If the operation is not supported, false will be returned and
ServiceControl::error is set.

The method will only set the autostart state. This will not start a service that is currently
not running.

@sa ServiceControl::SupportsSetAutostart, ServiceControl::supportFlags, ServiceControl::error,
ServiceControl::disableAutostart, ServiceControl::isAutostartEnabled
*/

/*!
@fn QtService::ServiceControl::disableAutostart

@returns true if autostart was disabled, false if not

The command can only be used if the control supports the ServiceControl::SupportsSetAutostart
flag is set. If the operation is not supported, false will be returned and
ServiceControl::error is set.

The method will only set the autostart state. This will not stop a service that is currently
running.

@sa ServiceControl::SupportsSetAutostart, ServiceControl::supportFlags, ServiceControl::error,
ServiceControl::enableAutostart, ServiceControl::isAutostartEnabled
*/


/*!
@fn QtService::ServiceControl::serviceName

@returns The services common name

This should be the QCoreApplication::name of the target service. This however is only a
guessed value and is only valid if the service follows the standard naming rules.

@sa ServiceControl::serviceId
*/
